contract OrderingManagementSC
{
    Registration registrationContract;

    constructor(address registrationAddress)public {
            registrationContract=Registration(registrationAddress);
    }

    //events
    event RawMaterialsOrderedSuccessfullyFromFarm(address farmer, string name, uint quantity, uint menuItemNum, string expiryDate);
    event RawMaterialsOrderedSuccessfullyFromFoodProcessor(address foodProcessor, string name, uint quantity, uint menuItemNum, string expiryDate);

    //must be a registered F&B and registered farm
  function  orderRawMaterialsFromFarm(address farmer, string memory name, uint quantity, uint menuItemNum, string memory expiryDate ) public
    {
        require(registrationContract.RegisteredFarmer(farmer));
        require(registrationContract.RegisteredFBretailor(msg.sender));
        emit RawMaterialsOrderedSuccessfullyFromFarm(farmer, name, quantity, menuItemNum, expiryDate);
    }

  //must be a registered F&B and registered foodProcessor
  function  orderRawMaterialsFromFoodProcessor(address foodProcessor, string memory name, uint quantity, uint menuItemNum, string memory expiryDate ) public
    {
        require(registrationContract.RegisteredFoodProcessor(foodProcessor));
        require(registrationContract.RegisteredFBretailor(msg.sender));
        emit RawMaterialsOrderedSuccessfullyFromFoodProcessor(foodProcessor, name, quantity, menuItemNum, expiryDate);
    }
}
